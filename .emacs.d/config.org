I will organise it better, I promise...
* Some basic emacs configuration
** IDO mode
   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
     (global-set-key (kbd "C-x C-b") 'ido-switch-buffer) ;;; bind switch buffer to C-x C-b
   #+end_src
** subword
   with camelCase it will move backwards to one word, not entire string. 
   #+begin_src emacs-lisp
     (global-subword-mode 1)
   #+end_src
** electric
   auto-closing of '()', '[]', "" and '{}'.
   #+begin_src emacs-lisp
     (setq electric-pair-pairs '(
				 (?\( . ?\))
				 (?\[ . ?\])
				 (?\" . ?\")
				 (?\{ . ?\})
				 ))
     (electric-pair-mode t)
   #+end_src
** Cancel everything with ESC
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Rebind universal argument (C-u)
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src
** Trasnparent Emacs window?

Well... Idk why but this doesn't work in sway.

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
    (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+end_src

* Basic Configuration
** UI
 Tool, menu and scroll bars.
 
   #+begin_src emacs-lisp

     (tool-bar-mode -1) ;;; disable tool-bar
     (menu-bar-mode -1) ;;; enable menu-bar
     (scroll-bar-mode -1) ;;; disable scroll-bar

   #+end_src
   
Show line and column in modeline.

   #+begin_src emacs-lisp
     (line-number-mode 1)
     (column-number-mode 1)

   #+end_src
   
Scroll conservatively (move per line). Just like it more than default scrolling in Emacs.

   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)

   #+end_src

Enable visual-bell. When reaching beginning or end of buffer/line modeline and first line will blink. 

  #+begin_src emacs-lisp

    (setq visible-bell t)

  #+end_src
  
Don't show welcome screen. Even if I don't use dashboard, I don't want to see it.

   #+begin_src emacs-lisp

     (setq inhibit-startup-message t)

   #+end_src
   
Highlight current line and prettify symbols.

   #+begin_src emacs-lisp

     (when window-system (global-hl-line-mode t))
     (when window-system (global-prettify-symbols-mode t)) ;;; this will replace some words with symbols
                                                           ;;; for example, lambda.

   #+end_src

Display line numbers. When in prog/text/conf mode will show line number on left side.

   #+begin_src emacs-lisp

     ;;(global-display-line-numbers-mode t)

     ;; Enable line numbers for some modes
     (dolist (mode '(text-mode-hook
                     prog-mode-hook
                     conf-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 1))))

     ;; Override some modes which derive from the above
     (dolist (mode '(org-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

   #+end_src   

Doom-modeline requires the fonts included with all-the-icons to be installed.
*M-x* /all-the-icons-install-fonts/ *RET*

   #+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    :custom
    ((doom-modeline-height 15)))

   #+end_src

Doom-themes. Some nice looking themes.

   #+begin_src emacs-lisp

     (use-package doom-themes
       :ensure t)

   #+end_src
   
Rainbow-delimiters. Will highlight brackets with different colors.

   #+begin_src emacs-lisp

     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode))
       ;;; :init
       ;;; (rainbow-delimiters-mode 1)) ;;; if you want to use it globally.

   #+end_src   

Beacon. Cursor will blink when opening new buffer or switch to another.

   #+begin_src emacs-lisp

     (use-package beacon
       :ensure t
       :init
       (beacon-mode 1))

   #+end_src

Start making some command with *CTRL* or *META* /(Alt)/ keys and it will list combinations.

#+begin_src emacs-lisp

  (use-package which-key
    :ensure t
    :defer 0
    :diminish which-key-mode ;;; actually, idk why use it here if diminish already in doom-modeline.
    :config
    (setq which-key-idle-delay 0.1) ;;; I personally want it to be fast af.
    :init
    (which-key-mode))

   #+end_src
** Dashboard

Dashboard with recent files, bookmarks, projects, agenda (org-mode) and registers.
Also changed logo, footer and title.

   #+begin_src emacs-lisp

     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-items '((recents  . 3)
                               (bookmarks . 5)
                               (projects . 10)
                               (agenda . 5))) ;;; configuring which sections to display on dashboard and how much elements should be in it.
       (setq dashboard-banner-logo-title "Are you going to code something or you just looking?") ;;; text that will appear on startup.
       (setq dashboard-startup-banner "/home/kami/Pictures/pfps/Anime-Girl-Pfp-PNG-Photo-Image.png")) ;;; banner image.

     (dashboard-modify-heading-icons '((recents . "file-text") ;;; i guess, it should add icons...
                                       (bookmarks . "book")))

     (setq dashboard-center-content t) ;;; center all dashboard's content.

     ;;; configure footer message and its icon.

     (setq dashboard-footer-messages '("I showed you my source code, pls respond."))
     (setq dashboard-footer-icon (all-the-icons-octicon "dashboard"
                                                        :height 1.1
                                                        :v-adjust -0.05
                                                        :face 'font-lock-keyword-face))
   #+end_src
** Terminal (will change it)

Setting default shell to zsh.

   #+begin_src emacs-lisp

     (defvar term-shell "/bin/zsh")
     (defadvice ansi-term (before force-zsh) ;;; not sure with this, but it works. i guess...
       (interactive (list term-shell)))
     (ad-activate 'ansi-term)

   #+end_src
   
Set keybinding for terminal.

   #+begin_src emacs-lisp

     (global-set-key (kbd "<C-return>") 'ansi-term) ;;; call terminal on CTRL+Enter

   #+end_src

** Evil-mode

Evil - Extensible VI Layer for Emacs. Basically, we can use Vi(m)'s keybingings in Emacs.

   #+begin_src emacs-lisp

     (defun rune/evil-hook ()
       (dolist (mode '(custom-mode
                       eshell-mode
                       git-rebase-mode
                       erc-mode
                       circe-server-mode
                       circe-chat-mode
                       circe-query-mode
                       sauron-mode
                       term-mode))
         (add-to-list 'evil-emacs-state-modes mode)))

     (use-package evil
       :ensure t
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-C-i-jump nil)
       :config
       (evil-mode 1)
       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

       ;; Use visual line motions even outside of visual-line-mode buffers
       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

       (evil-set-initial-state 'messages-buffer-mode 'normal)
       (evil-set-initial-state 'dashboard-mode 'normal))

     (use-package evil-collection
       :after evil
       :config
       (evil-collection-init))

     (defun dw/dont-arrow-me-bro ()
           (interactive)
           (message "Arrow keys are bad, you know?"))
     ;; Disable arrow keys in normal and visual modes
     (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
     (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
     (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
     (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro)

   #+end_src
   
** Org-mode

Some UI changes.

#+begin_src emacs-lisp

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Source Code Pro" :height 150)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Source Code Pro" :height 150)

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))
#+end_src

The org-mode itself.

#+begin_src emacs-lisp

    (use-package org
      :ensure t
      :hook (org-mode . efs/org-mode-setup)
      :config
      (setq org-ellipsis " ▾"
            org-hide-emphasis-markers t)
      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (setq org-agenda-files
            '("~/OrgFiles/tasks.org"
              "~/OrgFiles/projects.org"
              "~/OrgFiles/someday.org"
              "~/OrgFiles/Habit.org"))
      (efs/org-font-setup))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit t)
    (setq org-habit-show-all-today t)

#+end_src

Org-bullets and heading's style.

#+begin_src emacs-lisp
 
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Source Code Pro" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))

#+end_src

Org-mode task states.

#+begin_src emacs-lisp

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)")
                (sequence "PROJ(p)" "BUCKET(b)"))))

#+end_src

Org-mode capture distractions.

#+begin_src emacs-lisp

  (setq org-capture-templates
            '(("d" "Distraction" entry (file+headline "~/OrgFiles/distractions.org" "Notes")
             "* %?\n%T")))

#+end_src

Center all text in org-mode.

#+begin_src emacs-lisp

     (defun efs/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
             visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package visual-fill-column
       :ensure t
       :hook (org-mode . efs/org-mode-visual-fill))

#+end_src
   
Don't create another window when hitting *C-c '*. I use it for editing src blocks in org files.

#+begin_src emacs-lisp

     (setq org-src-window-setup 'current-window)

#+end_src

Add structures like emacs-lisp.   

#+begin_src emacs-lisp

  ;;; org-tempo for org-mode shortcuts (i.e. <s <TAB>)
  ;;; needed as of Org 9.2'
  (with-eval-after-load 'org
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))

#+end_src

Org-Roam for Zettelkasten.

#+begin_src emacs-lisp

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    (org-roam-dailies-capture-templates
          '(("d" "default" entry "* %<%I:%M %p>: %?"
             :if-new (file+head "%<%Y-%m-%d>.org" "#+TITLE: %<%Y-%m-%d>\n#+FILETAGS: :Daily:"))))
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n")
        :unnarrowed t)
       ("p" "psychology" plain
        (file "~/RoamNotes/Templates/psychologyTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+FILETAGS: psychology")
        :unnarrowed t)
       ("t" "thoughts" plain
        (file "~/RoamNotes/Templates/thoughtsTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n#+FILETAGS: thoughts")
        :unnarrowed t)
       ("i" "index file" plain
        (file "~/RoamNotes/Templates/indexTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+FILETAGS: :MOC:")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode)
    (org-roam-setup))

  (setq org-roam-node-display-template "${tags:15} ${title:100}")

#+end_src

** Ivy and counsel

If this doesn't work, try *M-x* /package-install/ *RET* /counsel/ *RET*.

   #+begin_src emacs-lisp

     (use-package ivy
       :ensure t
       :diminish
       :bind
       (("C-s" . swiper)
        :map ivy-minibuffer-map
        ("TAB" . ivy-alt-done)
        ("C-l" . ivy-alt-done)
        ("C-j" . ivy-next-line)
        ("C-k" . ivy-previous-line)
        :map ivy-switch-buffer-map
        ("C-k" . ivy-previous-line)
        ("C-l" . ivy-done)
        ("C-d" . ivy-switch-buffer-kill)
        :map ivy-reverse-i-search-map
        ("C-k" . ivy-previous-line)
        ("C-d" . ivy-reverse-i-search-kill))
       :config
       (ivy-mode 1))

   #+end_src

ivy-rich show little description and keybinding for command in *M-x* /counsel-M-x/

   #+begin_src emacs-lisp

     (use-package ivy-rich
       :ensure t
       :init
       (ivy-rich-mode 1))

   #+end_src

Some bindings for not using command above everytime.
We can config packages with use-package even if they're already installed.

   #+begin_src emacs-lisp

     (use-package counsel
       :ensure t
       :bind
       (("M-x" . counsel-M-x)
        ("C-x b" . counsel-ibuffer)
        ("C-x C-f" . counsel-find-file)
        :map minibuffer-local-map
        ("C-r" . 'counsel-minibuffer-history))
       :config
       (setq ivy-install-inputs-alist nil)) ;;; don't start search with '^'.

   #+end_src
** Something else

Disable backup

#+begin_src emacs-lisp

  (setq backup-inhibited t)

#+end_src

Disable auto-save

#+begin_src emacs-lisp

  (setq auto-save-default nil)

#+end_src

IDO vertical. Instead of ugly inline autocompletion. 

   #+begin_src emacs-lisp

     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)

   #+end_src

Switch-window

   #+begin_src emacs-lisp

     (use-package switch-window
       :ensure t
       :config
       (setq switch-window-input-style 'minibuffer)
       (setq switch-window-increase 4)
       (setq switch-window-threshold 2)
       ;;; optional:
       (setq switch-window-shortcut-style 'qwerty)
       (setq switch-window-qwerty-shortcuts
             '("a" "s" "d" "f" "j" "k" "l"))
       :bind
       ([remap other-window] . switch-window))

   #+end_src

Sudo-edit

   #+begin_src emacs-lisp

     (use-package sudo-edit
       :ensure t
       :bind ("s-C-e" . sudo-edit))

   #+end_src

Helpful

   #+begin_src emacs-lisp

     (use-package helpful
       :commands (helpful-callable helpful-variable helpful-command helpful-key)
       :ensure t
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       :bind
       ([remap describe-function] . helpful-function)
       ([remap describe-symbol] . helpful-symbol)
       ([remap describe-variable] . helpful-variable)
       ([remap describe-command] . helpful-command)
       ([remap describe-key] . helpful-key))

   #+end_src

General

   #+begin_src emacs-lisp

     (use-package general
       :ensure t
       :config
       (general-create-definer rune/leader-keys
         :keymaps '(normal insert visual emacs)
         :prefix "SPC"
         :global-prefix "C-SPC")

       (rune/leader-keys
       "t" '(:ignore t :which-key "toggles")
       "tt" '(counsel-load-theme :which-key "choose theme")
       "o" '(:ignore t :which-key "org-mode")
       "od" '(org-capture :which-key "add distraction")
       "ol" '(org-agenda-list :which-key "agenda list")
       "oA" '(org-agenda :which-key "agenda")))

   #+end_src

Hydra

   #+begin_src emacs-lisp

     (use-package hydra
       :defer t)

     (defhydra hydra-text-scale (:timeout 4)
       "scale text"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")
       ("f" nil "finished" :exit t))

     (rune/leader-keys
       "ts" '(hydra-text-scale/body :which-key "scale text"))

   #+end_src

Auto package updates.

#+begin_src emacs-lisp

  (use-package auto-package-update
    :ensure t
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src
** Functions

Always kill current buffer

   #+begin_src emacs-lisp

     (defun kill-cur-buf ()
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'kill-cur-buf)

   #+end_src

Config edit

   #+begin_src emacs-lisp

     (defun config-visit ()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)

   #+end_src

Config reload

   #+begin_src emacs-lisp

     (defun config-reload ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
     (global-set-key (kbd "C-c r") 'config-reload)

   #+end_src

Window splitting

   #+begin_src emacs-lisp

     (defun split-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

     (defun split-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))
     (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

   #+end_src

* TODO Something more
** Vertico (test)
#+begin_src emacs-lisp

  (use-package vertico)

#+end_src
* Programming
** Global

Projectile

   #+begin_src emacs-lisp

     (use-package projectile
       :ensure t
       :diminish projectile-mode
       :config
       (projectile-mode)
       :custom
       ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (when (file-directory-p "~/repos")
         (setq projectile-project-search-path '("~/repos")))
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :after projectile
       :config (counsel-projectile-mode))

   #+end_src

Magit

   #+begin_src emacs-lisp

     (use-package magit
       :commands magit-status
       :ensure t
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

     ;;; evil-magit is now in evil-collection, so you don't need to install in manually.

   #+end_src 

Flycheck
   
   #+begin_src emacs-lisp

     (use-package flycheck
       :ensure t
       :hook (prog-mode . flycheck-mode))

   #+end_src

Company

#+begin_src emacs-lisp

  (use-package company
    :ensure t
    :custom
    (company-idle-delay 0.1) ;; how long to wait until popup
    ;; (company-begin-commands nil) ;; uncomment to disable popup
    :bind
    (:map company-active-map
                ("C-n". company-select-next)
                ("C-p". company-select-previous)
                ("M-<". company-select-first)
                ("M->". company-select-last)))

#+end_src

Yasnippet

#+begin_src emacs-lisp

  (use-package yasnippet
    :after company
    :ensure
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'text-mode-hook 'yas-minor-mode))

#+end_src
** Rust

Clippy
#+begin_src emacs-lisp

  (use-package clippy)
  ;; (use-package rustic-clippy)

#+end_src

LSP

#+begin_src emacs-lisp

  (use-package lsp-mode
    :ensure t
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "rustic-clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    (lsp-rust-analyzer-server-display-inlay-hints t)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :ensure
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))

#+end_src

Flycheck

#+begin_src emacs-lisp

  (use-package flycheck-rust
    :ensure t
    :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

#+end_src

Rustic

#+begin_src emacs-lisp

  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))

#+end_src
** Web

Emmet

#+begin_src emacs-lisp

  (use-package emmet-mode
    :after (html-mode css-mode flycheck rjsx-mode))

  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  (add-hook 'rjsx-mode-hook 'emmet-mode) ;; enable Emmet in jsx?

#+end_src

Company

#+begin_src emacs-lisp

  (add-hook 'css-mode-hook 'company-mode)
  (add-hook 'rjsx-mode-hook 'company-mode)

#+end_src

Tidy

#+begin_src emacs-lisp

  (use-package format-all
    :after (rjsx-mode html-mode flycheck))

  (add-hook 'prog-mode-hook 'format-all-mode)

#+end_src

RJSX mode

#+begin_src emacs-lisp

  (use-package rjsx-mode
    :ensure t
    :mode "\\.js\\'")

#+end_src

Tide

#+begin_src emacs-lisp

  (defun setup-tide-mode()
    "Setup function for tide."
    (interactice)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (use-package tide
    :ensure t
    :after (rjsx-mode company flycheck)
    :hook (rjsx-mode . setup-tide-mode))

#+end_src

Prettier

#+begin_src emacs-lisp

  (use-package prettier-js
    :ensure t
    :after (rjsx-mode)
    :hook (rjsx-mode . prettier-js-mode))

#+end_src

* TODO Some ideas and what to do here.
- move all functions.
- add github urls.
- add some more descriptions.
